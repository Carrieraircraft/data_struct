// MyProject.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
//公众号：程序员速成 ，内含一辈子都让你感激自己的优质视频教程，欢迎关注


#include <iostream>
#include <list>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <assert.h>
#include <sstream>
#include <stack>

#pragma warning (disable: 4996) 
using namespace std;

int main()
{	
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);//程序退出时检测内存泄漏并显示到“输出”窗口


	//第三节  串的链式存储结构
	//第四节  串的朴素模式匹配算法
	//abdecdefg  ，def：子串的定位操作通常称为串的模式匹配。子串也被称为模式串。
	//串的模式匹配算法比较多：朴素模式匹配算法（BF)，Rabin-Karp(RK)算法，KMP算法，Boyer-Moore(BM)算法，Sunday算法，Trie树，AC自动机等。
	//主讲：朴素模式匹配算法（BF)，KMP算法
	//朴素模式匹配算法（BF：Brute Force)：对主串的每个字符作为子串的开头与子串进行匹配。
	//匹配成功的最好情况时间复杂度为O(m),
	//匹配失败的最好情况时间复杂度为O(n)
	//匹配成功 / 失败的最坏情况时间复杂度为O(n * m)

	//第五节  串的KMP模式匹配算法
	//（1）朴素模式匹配算法的问题
	//D.E.Knuth, J.H.Morris ，V.R.Pratt。
	// 
	//（2）KMP模式匹配算法观察1
	// abbab
	//前缀  ，后缀，公共前后缀
	//最长公共前后缀
	// 
	//（3）KMP模式匹配算法观察2
	//a)如果下标为0的位置就和主串不匹配，则子串右移一个位置
	//b)如果下标为1的位置和主串不匹配，子串右移动了一个位置
	//c)如果下标为2的位置和主串不匹配，子串右移动了一个位置
	//d)如果下标为3的位置和主串不匹配，。。。。
	//e)如果下标为4的位置和主串不匹配，。。。。
	//f)如果下标为5的位置和主串不匹配，。。。。
	//g)如果下标为6的位置和主串不匹配，。。。。
	//h)如果下标为7的位置和主串不匹配，。。。。

	//“下一步数组”。next数组/前缀表/前缀数组
	//next数组存在的意义：指示当子串中某个位置的字符与主串相应位置字符不匹配时，
	   //应该将子串中的哪一位字符与主串中的当前位/下一位 字符做比较。








		
	return 0;
}


// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧:  ∞
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误nm,
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件



