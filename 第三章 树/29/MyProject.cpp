// MyProject.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
//公众号：程序员速成 ，内含一辈子都让你感激自己的优质视频教程，欢迎关注

#include <iostream>
#include  <assert.h>

#ifdef _DEBUG   //只在Debug（调试）模式下
#ifndef DEBUG_NEW
#define DEBUG_NEW new(_NORMAL_BLOCK,__FILE__,__LINE__) //重新定义new运算符
#define new DEBUG_NEW
#endif
#endif

//#include <boost/type_index.hpp>
using namespace std;
#pragma warning(disable : 4996) 
//#pragma warning(disable : 6386) 

//链式队列相关代码
namespace _nmsp1
{


}

int main()
{
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);//程序退出时检测内存泄漏并显示到“输出”窗口


	//（12）哈夫曼树（Huffman Tree）：霍夫曼树/最优二叉树
	// （12.1）基本术语、概念
	    //a)节点的权值：节点的数字
		//b)从根节点到某节点的路径长度：经过的段数。
		//c)节点的带权路径长度(WPL)：从根节点到该节点的路径长度*该节点的权值。
		//d)树的带权路径长度：树中所有叶子节点的带权路径长度之和。
		//1：WPL=38
		//2：WPL=32
		//3：WPL=50
		//4：WPL=51
		//e)哈夫曼树：WPL值最小的那棵。在含有n个带权叶节点的二叉树中，其中带权路径长度（WPL）最小的二叉树称为哈夫曼树（最优二叉树）。
	
	//（12.2）哈夫曼树的构造及相关的代码实现
		//如果给定n个叶子节点，如何构造包含这n个节点的哈夫曼树，步骤：。。。
	    //哈夫曼树特性：
		//a)初始给的节点都作为哈夫曼树的叶子节点
		//b)权值越大的叶子节点到根的路径长度越小。权值越小的叶子节点到根的路径长度越大。
	    //c)哈夫曼树最终节点是n+(n-1)=2n-1。n是叶子节点数量
	    //d)每个节点都有左右子树，所以没有度为1的节点。
		//e)哈夫曼的子树仍旧是 一棵哈夫曼树。
		//f)哈夫曼树并不唯一,但相同叶子节点的哈夫曼树的WPL值一定是相等的。
		






	return 0;
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件




