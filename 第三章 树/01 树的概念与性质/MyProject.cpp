// MyProject.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
//公众号：程序员速成 ，内含一辈子都让你感激自己的优质视频教程，欢迎关注

#include <iostream>
#include  <assert.h>

#ifdef _DEBUG   //只在Debug（调试）模式下
#ifndef DEBUG_NEW
#define DEBUG_NEW new(_NORMAL_BLOCK,__FILE__,__LINE__) //重新定义new运算符
#define new DEBUG_NEW
#endif
#endif

//#include <boost/type_index.hpp>
using namespace std;
#pragma warning(disable : 4996) 
//#pragma warning(disable : 6386) 

//------------------------------
namespace _nmsp1
{
	
}

int main()
{
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);//程序退出时检测内存泄漏并显示到“输出”窗口

	//第3章 树
	//二叉树最常用
	//第一节  树形结构基本概念:非线性，一对多关系：一棵数字可以分叉出很多子树枝、树叶等。
	//树(Tree)是n(n>=0)个节点的有限集。n=0时的树是一棵空树。
	//若非空树：a)有且只有唯一一个称为根/树根(root)的节点。
	           //b)n>1时，其余节点可以分为m(m>0)个互不相交的有限集T1、T2、....、Tn。 每个集合自身又是一棵树并称呼为根的子树。
	 //绘制顺序：从上到下。将树根绘制在最上面。
	//有序树：各个子树是有次序的，叫做有序树。 否则称呼无序树。

	//a)节点拥有的子树数目称为节点的度。
	//b)度为0的节点称为叶节点或终端节点。
	//c)度不为0的节点称呼为分支节点或者非终端节点。除根节点外的分支节点也称为内部节点。
	//d)树的度 就是树内各节点度的最大值。
	//e)节点的子树的根称为该节点的子节点。父节点。某个节点只要能有一个父节点。根节点没有父节点。
	//f)节点的层次。树的高度或者深度是节点最大层数。
	//g)相同父节点的孩子之间互称兄弟节点（Sibling)。层次相同但父节点不同的孩子之间称为堂兄弟节点。

	//第二节  二叉树
	//（1）基本概念
	//每个节点最多有两个子树（左子树和右子树），有序树。
	//定义：二叉树是n(n>=0)个节点的有限集合，该集合或者为空集（n=0，空二叉树)，或者由一个根节点和两个
	   //互不相交的该根节点的左子树和右子树构成，左子树和右子树又分别是一棵二叉树。
	//二叉树不一定是度为2的有序树。

	//（2）特殊二叉树
	//（2.1）满二叉树
	//满二叉树特点：
	  //a)所有分支节点都存在左子树和右子树（非叶子节点度一定是2）。
	  //b)所有叶子节点都在同一层（叶子节点只能出现在最下层）。
	  //c)不存在度为非0或者非2的节点。
	//满二叉树定义：一棵高度为h，并且含2^h-1个节点的二叉树。

	//（2.2）完全二叉树
	//特点：
	//a)叶节点在最底下两层
	//b)最后一层的叶子节点都靠左侧排列（左侧连续），并且除最后一层，其他层的节点个数都要达到最大。
	//c)倒数第二层如果有叶节点，则叶节点都靠右侧排列（右侧连续）。
	//d)如果节点为度为1，则该节点只有左子树，不可以只有右子树，而且做多只有一个度为的节点。
	//满二叉树是一棵完全二叉树，而完全二叉树不一定是一棵满二叉树
	
	//（2.3）斜树
	//左斜树，右斜树

	//（3）二叉树的性质
	//a)性质1：二叉树的第i层，最多有2的i-1次方个节点(i>=1)
	//b)性质2：高度为k的二叉树至多有(2的k次方) - 1个节点（k>=1)
	//c)性质3：二叉树节点的总数量等于节点的总度数+1
	//d)性质4：（看PPT）任何一个二叉树，若叶节点数量为n0，度为2的节点数量为n2，
	   //则叶节点的数量比有两个子树的节点数量多一个，即：n0 = n2 +1。
	 //若假设度为1的节点数量为n1，  那么二叉树节点总数量：n = n0+n1+n2；
	//节点总度数 = 2*n2 + n1；
	//根据性质3，节点的总数量n = 2*n2 + n1 + 1；
	//n0+n1+n2 = 2*n2 + n1 + 1  ==>n0 = n2 +1。

	//知道了一个完全二叉树的节点总数n,如何求出n0(叶节点数量），n1（度为1的节点数量），n2（度为2的节点数量）。
	 //d.1)完全二叉树最多只有一个度为1的节点，即n1 = 0或者n1 = 1。
	 //d.2)根据公式 n = 2*n2 + n1 + 1,其中2*n2 +1的结果肯定是奇数（不能被2整除的整数）
	 //d.3)那么，如果该完全二叉树节点总数是偶数（能被2整除）个，那么n1必定是奇数也就是值1.
	   //如果该完全二叉树节点总数是奇数，那么n1必定是偶数也就是值0.
	 //d.4)n值已知，n1值已推出，根据句公式 n = 2*n2 + n1 + 1，n2值就可以求得。再根据性质4的n0 = n2 +1，n0的值就可以求得。

	//e)性质5：看PPT
	//f)性质6：看PPT











	
	return 0;
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件


