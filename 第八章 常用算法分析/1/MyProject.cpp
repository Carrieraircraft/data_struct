// MyProject.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
//公众号：程序员速成 ，内含一辈子都让你感激自己的优质视频教程，欢迎关注

#include <iostream>

#pragma warning (disable: 4996) 
using namespace std;

int main()
{	
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);//程序退出时检测内存泄漏并显示到“输出”窗口

	//第8章 算法设计方法
	//第一节  贪心算法(Greedy Algorithm)
	//贪心策略——选择每个阶段或者每次操作里的局部最优解，从而达到全局最优的结果。
	//（1）几个基本的贪心算法案例
	//力扣网站(LeetCode：https://leetcode.cn)
	//（1.1）分配问题
	//a)给孩子分饼干。
	//b)背包问题。
	//c)纸币问题
	//贪心算法：没有办法保证总可以得到最优解。
	//（1.2）区间覆盖问题
	//n个区间，区间的开始点和结束点分别是[b1,e1]、[b2,e2]、[b3,e3]、...[bn,en]。
	//[1,6],[6,7],[3,5],[5,9],[8,10],[1,4],[2,3],[3,4]
	//满足两两不相交，求解最多能够选出多少个区间。
	//[2,3],[1,4],[3,4],[3,5],[1,6],[6,7],[5,9],[8,10]
	//[2,3],[3,4],[6,7],[8,10]	
	//（1.3）股票买卖最佳时机问题
	//[1,2,3,2,10]，每个元素代表第i天的股票价格，设计算法计算能够获得的最大利益
	//2-1=1,3-2=1,10-2=8，总利润=10
	//[7,1,5,3,6,4]
	//4 + 3  = 7
	//[1,2,3,4,5,6]

	//（2）贪心算法的应用、解题步骤及使用
	//难点：将问题抽象成贪心算法模型（贪心选择策略的确定）——通过局部最优解来推导出全局最优解的结果。
	//该算法专注于子问题的最优，但可能无法取得全局最优。
	//贪心算法解体步骤：
	//a)提取出问题期望达到的目标以及有什么样的限制。
	//b)将问题分为若干个子问题，针对每个子问题尝试找到合适的贪心策略——每个子问题求解时要尽量达到对目标的达成贡献最大（求解每个子问题的最优解）
	//c)将局部最优解迭代成全局最优解
	//d)举几个例子验证一下所选择的贪心算法产生的结果是否是最优结果。




	int sp[] = {1,2,3,2,10}; //记录股票每天价格的数组
	int ispsize = sizeof(sp) / sizeof(int); //计算数组元素个数
	int profit = 0; //获得的总利润计数
	for (int i = 1; i < ispsize; ++i) //这里注意i从1开始
	{
		int cha = sp[i] - sp[i - 1]; //第2天的价格sp[i]-当天sp[i-1]价格
		if (cha > 0) //第2天价格高，那么就当天买，第2天卖，两者差值就是利润
			profit += cha;
	}//end for
	cout << "最大利润为：" << profit << endl;
	return 0;
}


// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧:  ∞
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误nm,
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件



